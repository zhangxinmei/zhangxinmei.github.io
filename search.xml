<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>本溢出处理方案</title>
      <link href="/2020/05/06/css-ellipsis/"/>
      <url>/2020/05/06/css-ellipsis/</url>
      
        <content type="html"><![CDATA[<ul><li>单行文本溢出</li></ul><p>首先需要先设置元素的宽度，然后设置下面</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span> // 设置文字不能换行<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span> // 文本溢出时显示<span class="token number">...</span></code></pre><ul><li>多行文本溢出</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">webkit-line-clamp</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span>（用来限制在一个块元素显示的文本的行数, <span class="token number">2</span> 表示最多显示 <span class="token number">2</span> 行。 为了实现该效果，它需要组合其他的WebKit属性）<span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>（和 <span class="token number">1</span> 结合使用，将对象作为弹性伸缩盒子模型显示 ）<span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>（和 <span class="token number">1</span> 结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 ）<span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块格式化上下文(BFC)</title>
      <link href="/2020/05/06/bfc/"/>
      <url>/2020/05/06/bfc/</url>
      
        <content type="html"><![CDATA[<p>官方MDN的解释：<br>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p><h2 id="通俗的理解"><a href="#通俗的理解" class="headerlink" title="通俗的理解"></a>通俗的理解</h2><p>BFC通俗一点来说就是一个独立布局的环境，在这个环境里面的元素不受外界影响。并且处在同一BFC中的块级盒子和行级盒子都会垂直的沿着其父元素的边框排列。</p><h2 id="产生BFC的情况"><a href="#产生BFC的情况" class="headerlink" title="产生BFC的情况"></a>产生BFC的情况</h2><ul><li>根元素或包含根元素的元素<blockquote><p>也就是说根元素会产生一个BFC，那么在根元素html里面的所有不满足产生BFC的元素都是在同一个BFC中。</p></blockquote></li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素（元素的 display 为 inline-block）</li><li>表格单元格或表格标题（元素的 display为 table-cell或 table-captionHTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）</li><li>overflow 值不为 visible 的块元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li><li>网格元素（display为 grid 或 inline-grid 元素的直接子元素）</li></ul><p>所以如果要让元素产生BFC，只需要设置上面的任何一个属性即可。</p><h2 id="BFC的特性"><a href="#BFC的特性" class="headerlink" title="BFC的特性"></a>BFC的特性</h2><ul><li><p>内部的Box会在垂直方向，从顶部开始一个接一个地放置。</p></li><li><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加</p></li><li><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。</p></li><li><p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。</p></li><li><p>计算BFC高度是包含其浮动子元素的.</p></li></ul><h2 id="BFC-margin重叠问题"><a href="#BFC-margin重叠问题" class="headerlink" title="BFC margin重叠问题"></a>BFC margin重叠问题</h2><p>处在<strong>同一</strong>BFC中，且盒子都不满足产生BFC的情况下，会产生margin重叠。记住一定是同一BFC中，所以里面的盒子不能产生BFC，一但产生就创建了一个新的BFC，那么他们也就不会出现margin重叠了。</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">   <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>          <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b1.png" alt="image"></p><p>我们给parent设置了 overflow: hidden;那么parent也就是一个BFC。所以里面的child都处在同一个BFC中,从图中也可以看到明显的margin重叠，因为按照不重叠的话child之间的间距应该是20px，但是实际是10px。</p><pre class=" language-html"><code class="language-html">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">      <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b0.png" alt="image"></p><p>从上面的图片图片中也可以看出来处在根元素html中的非BFC元素也会产生margin重叠，因为html是一个BFC，因此里面的元素就相当于处在同一个BFC中，因此他们会产生margin重叠。</p><h2 id="消除BFC中的margin重叠"><a href="#消除BFC中的margin重叠" class="headerlink" title="消除BFC中的margin重叠"></a>消除BFC中的margin重叠</h2><p>需要给发生重叠中的元素设置任何一个满足产生BFC的css样式都能取消重叠。但在这个问题上我产生了一点疑问就是：我发现我给上面的child加 overflow: hidden;很多上面提到产生BFC的属性都没有用，只有display为inline-block和设置float浮动才有效果，其他的还是一样有重叠。而当我给child都加上一层div以后，加上任何能产生BFC的属性都有效果了，margin不再重叠。我弄不明白是因为什么呢？<br>上代码和图：</p><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">   <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>          <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b1.png" alt="image"></p><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">   <span class="token selector"><span class="token class">.parent</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>          <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.child</span></span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>          <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p>这里包了一层div之后就，再加 overflow: hidden;就可以，并且我还试过其他可以产生BFC的元素都是可以实现的。<br><img src="https://github.com/zhangxinmei/summary/raw/master/img/b3.png" alt="image"></p><h2 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h2><h4 id="1-用于清除浮动，防止容器高度坍塌"><a href="#1-用于清除浮动，防止容器高度坍塌" class="headerlink" title="1. 用于清除浮动，防止容器高度坍塌"></a>1. 用于清除浮动，防止容器高度坍塌</h4><p>我们知道如果元素设置了浮动，那么他的父元素的高度会坍塌，如下：</p><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> firebrick<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span>>div</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b8.png" alt="image"><br>从图中可以看出wrap的高度坍塌了，为0</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>这时候就可以通过BFC来清除浮动，给wrap设置一个 overflow: hidden;或者其他能让其产生BFC的css,就可以清除浮动啦</p><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrap</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> firebrick<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.wrap</span>>div</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b9.png" alt="image"></p><h4 id="1-用于实现自适应两列布局"><a href="#1-用于实现自适应两列布局" class="headerlink" title="1. 用于实现自适应两列布局"></a>1. 用于实现自适应两列布局</h4><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.wrap</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">102</span>, <span class="token number">181</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fcc</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>如果是上面的这样，那么根据BFC的规则：</p><blockquote><p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>则会出现如下图的布局：</p></blockquote><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b10.png" alt="image"></p><h4 id="2-实现两列布局的方法"><a href="#2-实现两列布局的方法" class="headerlink" title="2. 实现两列布局的方法"></a>2. 实现两列布局的方法</h4><p>再根据BFC的特性：</p><blockquote><p>BFC的区域不会与float box重叠。</p></blockquote><p>所以只要把right变成BFC即可</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.wrap</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">102</span>, <span class="token number">181</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fcc</span><span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/b11.png" alt="image"></p><p>如上图，轻松实现两列自适应布局，不管屏幕多大都会自适应。是不是很棒！</p><p>参考资料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN块格式化上下文</a><br><a href="https://www.jianshu.com/p/66632298e355#" target="_blank" rel="noopener">BFC(块级格式化上下文)</a><br><a href="http://www.html-js.com/article/1866" target="_blank" rel="noopener">CSS之BFC详解</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL Schema 设计：构建可演进的 Schema</title>
      <link href="/2020/05/06/graphql-shemal-design/"/>
      <url>/2020/05/06/graphql-shemal-design/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是 Marc-Andre Giroux 的客座文章，他目前正在 GitHub 的生态系统 API 团队工作。他一直在编写和思考 GraphQL 持续进化和模式设计。如果您需要一些 GraphQL 的帮助，可以通过 <a href="mailto:marc@mgiroux.me">marc@mgiroux.me</a> 与他联系。</p></blockquote><p>虽然 GraphQL 允许我们不断改进我们的 schema，例如使用GraphQL内置的废弃字段的方式，但我们不应该轻易地废弃 schema 中的字段。最后，在最好的情况下，我们废弃一个字段仍然需要我们的集成商做一些工作来适配这个改动，而最坏的情况是对于那些没有做出改动的人来说这是一个破坏性的改动。</p><p>虽然可以通过更好的工具和文档（例如我们在 <a href="https://developer.github.com/v4/changelog/" target="_blank" rel="noopener">GitHub</a> 上 <a href="https://developer.github.com/v4/breaking_changes/" target="_blank" rel="noopener">build</a> 的文档）以更简单的方式来进行这些更改，但是我们必须记住，如果我们想要一个让集成商信任并且稳定的 API，那么使用自带的废弃字段的方式绝对是最后的手段。</p><p>好消息是，有一些方法可以构建我们的 GraphQL schema，以避免将来发生严重的重大变化。在构建 API 时，我们必须记住，需求会发生变化，我们要为这种情况做好充分的准备。在这篇文章中，我们将探讨在为未来设计 API 时可以提供帮助的一些事项。</p><h3 id="1-对象类型优先于更简单的结构"><a href="#1-对象类型优先于更简单的结构" class="headerlink" title="1. 对象类型优先于更简单的结构"></a>1. 对象类型优先于更简单的结构</h3><p><img src="./images/05.png" alt="images"></p><p>以此 <code>CalendarEvent</code> 类型为例，注意 timeRange 字段，它表示事件何时开始并结束。乍一看，这看起来还不错。我们有一个列表类型，它可能与我们内部匹配，以索引为 0 的数组开始，索引 1 为结尾。</p><p>现在如果我们想要添加更多与该范围相关的数据呢？例如，该时间范围是过去还是将来？在它的当前状态中，我们必须向 <code>CalendarEvent</code> 添加一个字段。我们将其命名为 <code>timeRange</code> ，好让我们的集成商知道它们是相关的。或者最糟糕的是，我们最终会废弃 <code>timeRange</code> 并为 <code>timeRange</code> 字段做出不同的设计。</p><p><img src="./images/06.png" alt="This looks slightly off 🤔"></p><p>这里的问题是我们无法在同一个 <code>timeRange</code> 字段中添加这些数据，因为我们遇到了一个扁平的 <code>DateTime</code> 数组。如果我们用不同的方式设计 <code>timeRange</code> 字段会怎么样？如果我们在这里使用了一个对象类型而不是一个数组，我们最终会得到如下的结果：</p><p><img src="./images/07.png" alt="This looks slightly off 🤔"></p><p>这样做更好的原因主要有以下几点：</p><ol><li>我们可以轻松地为 <code>TimeRange</code> 类型添加任何我们想要的额外数据。</li><li>我们已经命名了我们的字段，而不是使用数组索引，这对于集成商来说是非常有用的。</li><li>相关数据在单个类型中就能找到，而不需要通过字段名称前缀来执行此操作。</li></ol><p>试想一下你为你的字段或参数使用的类型是否是未来不会改变的。如有疑问，请使用更复杂的结构，如 object 类型或 input 类型。</p><h3 id="2-有疑问时，具体命名"><a href="#2-有疑问时，具体命名" class="headerlink" title="2.有疑问时，具体命名"></a>2.有疑问时，具体命名</h3><p>当我们开始构建 GraphQL Schema 时，我们可以使用名称的整个命名空间。在创建一个新类型时，我们很容易使用最简单的方法来描述新实体。例如，采用 <code>Comment</code> 类型来描述某人在 SomeSocialMedia™ 上发布的帖子的评论。</p><p>在一段时间内，这对我们来说可能是完美的。但是，我们最终可能会引入另一种评论，而这个评论实际上和之前的是不同的。例如，这个新的评论类可能是新的应用程序反馈的表单评论。它的目的是完全不同的，它有不同的字段，但也有共同的字段。</p><p>现在我们必须将新评论命名为 <code>FeedbackFormComment</code>，我们坚持使用代表帖子评论的通用对象类型 <code>Comment</code>。试想一下，如果我们想要建立一个 <code>Comment</code> 接口，我们就会意识到我们有一些具有相同行为的类型，那么我们的帖子评论现在已经窃取了接口的通用名称了 😾。</p><p>现在我们需要解决使用 <code>Comment</code> 类型废弃所有字段的长期难题。使用不太理想的名称创建接口，删除旧字段，最后将接口重命名为 <code>Comment</code>，经历这个过程并不是一件有趣的事情。</p><p>像这样的类型更改需要以下 3 个步骤才能完成：</p><ol><li>弃用现有字段，并使用新名称和临时名称创建新字段。</li><li>删除具有所需名称的所有现有成员，并废弃新创建的字段，因为我们需要将它们重命名为所需的名称。</li><li>删除临时字段，然后使用所需名称添加它们，现在可以自由的使用了。</li></ol><p>如果我们最初将我们的类型命名为 <code>PostComment</code>，那么将为我们留出一些空间来清楚地定义 <code>Comment</code> 是什么。</p><h3 id="3-首选字段和类型而不是自定义标量"><a href="#3-首选字段和类型而不是自定义标量" class="headerlink" title="3.首选字段和类型而不是自定义标量"></a>3.首选字段和类型而不是自定义标量</h3><p>使用 GraphQL 的类型系统很难描述某些结构。例如，递归数据结构很难用 GraphQL 构建，可能需要我们使用自定义标量来正确表示。</p><p>但在大多数情况下，GraphQL 的类型系统为我们提供了足够的工具来模拟我们 schema 中的任何内容，而不是依赖于 JSON 标量或任何自定义标量。</p><p>过度使用自定义标量存在以下一些问题：</p><ol><li>我们失去了自我检查的能力，用户很难从返回的其中一个标量的字段中看出返回的数据形状。</li><li>在服务器端，我们现在不知道我们的集成商是如何使用这些数据的，这使得很难对这些自定义标量的结构进行更改。我们不能使用 GraphQL 自带的废弃字段的方式来做，因为我们没有在返回的有效数据中使用 GraphQL 字段。</li></ol><p>另一个类似的例子是，当我们可以使用枚举轻松地表示字段时，那么就可以使用 String 类型。例如，对于 String 类型的 <code>status</code> 字段，我们的客户端需要猜测 <code>status</code> 的可能值。它使我们很难添加或删除值，因为它们不可能由我们的用户来处理。使用枚举可以让用户知道字段何时发生变化，或者至少让我们在需要时使用自带的废弃方式。</p><h3 id="奖励：忘记数据，了解你的业务领域！"><a href="#奖励：忘记数据，了解你的业务领域！" class="headerlink" title="奖励：忘记数据，了解你的业务领域！"></a>奖励：忘记数据，了解你的业务领域！</h3><p>这个实用性没有那么大，但我仍然认为这是我们在构建任何 API 时需要关注的最重要的事情之一，这些 API 将持续并将很好地被我们的集成商使用。在设计 GraphQL schema 的外形时，请尝试真正了解你要模拟的内容，并尽可能地了解你的业务领域。</p><p>使用具有类型系统的 GraphQL，我们发现现在出现了许多工具，这些工具试图从数据库，ActiveRecord 模型或 REST API 中生成 GraphQL 类型。虽然这样很容易使用，并且有时通过复制我们的数据模型或现有 API 是非常有用的，但我们忘记了 GraphQL 是为我们塑造我们业务领域的接口而生的。尝试使用该功能而不是使用数据的形状作为灵感来塑造你的 API（避免使用 <a href="https://medium.com/@__xuorig__/graphql-mutation-design-anemic-mutations-dd107ba70496" target="_blank" rel="noopener">Anemic GraphQL</a>）。</p><p>通过这样做，实现的细节可能会改变，但只要我们正确地建模我们的业务领域，你的 API 应该会保持稳定！</p><p>感谢你的阅读 ❤️，如果你喜欢这篇文章，你可能会喜欢我一直在努力发布的 <a href="https://book.graphqlschemadesign.com/" target="_blank" rel="noopener">The Graph Book Schema Design</a>。如果你订阅更新，那将会收获更多！</p><p>原文链接：<a href="https://blog.apollographql.com/graphql-schema-design-building-evolvable-schemas-1501f3c59ed5" target="_blank" rel="noopener">https://blog.apollographql.com/graphql-schema-design-building-evolvable-schemas-1501f3c59ed5</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> GraphQL </tag>
            
            <tag> 译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL 简介：原理及其使用</title>
      <link href="/2020/05/06/graphql-node/"/>
      <url>/2020/05/06/graphql-node/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/graphql/graphql-01.jpeg" alt="Photo by Matt Duncan on Unsplash"></p><blockquote><p>GraphQL 是 API 的查询语言，它显示了服务器提供的不同类型的数据，然后客户端可以准确地选择它想要的内容。</p></blockquote><p>同样在 GraphQL 中，你可以一次性调用多个服务器资源，而不在需要进行多个 REST API 调用。</p><p>你可以通过访问 <a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a> 来了解 GraphQL 的所有优点。我们必须在实践中使用 GraphQL，否则你很难理解它的优点，那么现在就让我们开始使用 GraphQL 吧~</p><p>我们将在本文中使用 GraphQL 和 NodeJS。</p><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>安装 NodeJS：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><h3 id="如何将-GraphQL-与-NodeJs-一起使用？"><a href="#如何将-GraphQL-与-NodeJs-一起使用？" class="headerlink" title="如何将 GraphQL 与 NodeJs 一起使用？"></a>如何将 GraphQL 与 NodeJs 一起使用？</h3><p>GraphQL 可以与多种语言一起使用，这篇文章中，我们将重点介绍如何通过 NodeJS 将 GraphQL 与 JavaScript 结合使用。</p><p>新建一个名为 graphql-with-nodejs 的文件夹，进入项目文件夹并运行 <code>npm init</code> 来创建 NodeJS 项目，终端命令如下：</p><pre class=" language-js"><code class="language-js">cd graphql<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>nodejsnpm init</code></pre><h2 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h2><p>使用以下命令安装 Express：</p><pre class=" language-js"><code class="language-js">npm install express</code></pre><p>我们将使用以下命令安装 GraphQL 和 GraphQL for Express：</p><pre class=" language-js"><code class="language-js">npm install express<span class="token operator">-</span>graphql graphql</code></pre><h3 id="NodeJS-代码"><a href="#NodeJS-代码" class="headerlink" title="NodeJS 代码"></a>NodeJS 代码</h3><p>在项目中创建一个名叫 server.js 的文件，并将以下代码复制到其中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Server Running at localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的代码有一个名为 /hello 的 HTTP GET 请求，这个请求是使用 Express 创建的。现在，让我们修改此代码来启用 GraphQL。</p><h3 id="在代码中启用-GraphQL"><a href="#在代码中启用-GraphQL" class="headerlink" title="在代码中启用 GraphQL"></a>在代码中启用 GraphQL</h3><p>GraphQL 有一个名为 /graphql 的单一的 URL 资源路径，它将处理所有的请求。</p><p>将以下代码复制到 server.js 中：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//get all the libraries needed</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> graphqlHTTP <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express-graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> GraphQLSchema <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> queryType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./query.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setting up the port number and express app</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Define the Schema</span><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> query<span class="token punctuation">:</span> queryType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Setup the nodejs GraphQL server</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token string">"/graphql"</span><span class="token punctuation">,</span>  <span class="token function">graphqlHTTP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    schema<span class="token punctuation">:</span> schema<span class="token punctuation">,</span>    graphiql<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`GraphQL Server Running at localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在让我们来看看这段代码吧~</p><p><strong>graphqlHTTP</strong> 使我们能够在 /graphql url 中设置 GraphQL 服务器，它知道如何处理即将发生的请求。这个设置在以下代码行中完成：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token string">"/graphql"</span><span class="token punctuation">,</span>  <span class="token function">graphqlHTTP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    schema<span class="token punctuation">:</span> schema<span class="token punctuation">,</span>    graphiql<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在，让我们一起来探索 graphqlHTTP 中的参数吧~</p><h3 id="graphiql"><a href="#graphiql" class="headerlink" title="graphiql"></a>graphiql</h3><p>graphiql 是一个 Web UI，您可以使用它来测试 GraphQL 资源路径。我们将其设置为 true，以便更容易测试我们创建的各种 GraphQL 请求路径。</p><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><p>GraphQL 有一个外部资源路径 /graphql，这个资源路径可以有多个其他资源路径执行各种操作，这些资源路径可以在 schema 中被指定。</p><p>schema 将执行以下操作：</p><ul><li><p>指定资源路径</p></li><li><p>指示资源路径的输入和输出字段</p></li><li><p>指示在命中资源路径时应执行的操作，依此类推</p></li></ul><p>schema 在代码中定义如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> query<span class="token punctuation">:</span> queryType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>schema 可以包含 <strong>Query</strong> 和 <strong>Mutation</strong> 类型，但是这篇文章将仅关注 Query 类型。</p><h3 id="查询（query）"><a href="#查询（query）" class="headerlink" title="查询（query）"></a>查询（query）</h3><p>你可以在 schema 中看到查询已设置为 queryType，我们使用以下命令从 query.js 文件中导入 queryType：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> queryType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./query.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>query.js 是我们即将创建的自定义文件，query 是我们在 schema 中指定只读请求路径的地方。</p><p>在项目中新建一个名为 query.js 的文件，并将以下代码复制到其中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> GraphQLObjectType<span class="token punctuation">,</span> GraphQLString <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Define the Query</span><span class="token keyword">const</span> queryType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Query"</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> GraphQLString<span class="token punctuation">,</span>      resolve<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>queryType <span class="token operator">=</span> queryType<span class="token punctuation">;</span></code></pre><h3 id="查询说明"><a href="#查询说明" class="headerlink" title="查询说明"></a>查询说明</h3><p>queryType 创建为 <strong>GraphQLObjectType</strong> 并命名为 Query。<strong>fields</strong> 是我们指定各种资源路径的地方，因此我们在这里添加一个名为 hello 的资源路径，hello 有一个 GraphQLString 类型，这意味着该资源路径的返回类型为 String。这里的类型是 GraphQLString 而不是 String，因为这是 GraphQL scheme，因此直接使用 String 是不行的。</p><p>resolve 函数表示调用请求时要执行的操作，这里的操作是返回一个字符串 Hello World。</p><p>最后，我们用 <code>exports.queryType = queryType</code> 导出 querytype，这是为了确保我们可以在 <strong>server.js</strong> 中导入它。</p><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><p>使用以下命令运行应用程序：</p><pre class=" language-js"><code class="language-js">node server<span class="token punctuation">.</span>js</code></pre><p>你可以通过访问 localhost:5000/graphql 本地运行和测试该程序。</p><p>此 URL 在 Graphiql Web UI 中运行，如下图所示：</p><p><img src="/images/graphql/graphql-02.jpg" alt="Graphiql Web UI"></p><p>左边输入相应查询，右边为相应的输出，输入以下查询：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  hello<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的输出如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"hello"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="恭喜你！😃"><a href="#恭喜你！😃" class="headerlink" title="恭喜你！😃"></a>恭喜你！😃</h3><p>你已经创建了第一个 GraphQL 资源路径。</p><h3 id="添加更多资源路径"><a href="#添加更多资源路径" class="headerlink" title="添加更多资源路径"></a>添加更多资源路径</h3><p>我们将会创建 2 个新的资源路径：</p><ul><li><p><strong>movie</strong>：这个资源路径将会返回指定 ID 的电影</p></li><li><p><strong>director</strong>：这个资源路径将返回指定 ID 的导演，还将返回该导演指导的所有电影。</p></li></ul><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>通常，一个应用程序将从数据库中读取数据，但是在本教程中，我们将简单地对代码本身中的数据进行硬编码。</p><p>创建一个名为 data.js 的文件，并添加以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Hardcode some data for movies and directors</span><span class="token keyword">let</span> movies <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Movie 1"</span><span class="token punctuation">,</span>    year<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span>    directorId<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Movie 2"</span><span class="token punctuation">,</span>    year<span class="token punctuation">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>    directorId<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Movie 3"</span><span class="token punctuation">,</span>    year<span class="token punctuation">:</span> <span class="token number">2016</span><span class="token punctuation">,</span>    directorId<span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> directors <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Director 1"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Director 2"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">30</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Director 3"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">40</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>movies <span class="token operator">=</span> movies<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>directors <span class="token operator">=</span> directors<span class="token punctuation">;</span></code></pre><p>此文件包含 movies 和 directors 数据，我们将使用此文件中的数据作为我们请求所需的数据。</p><h3 id="将-movie-资源路径添加到查询中"><a href="#将-movie-资源路径添加到查询中" class="headerlink" title="将 movie 资源路径添加到查询中"></a>将 movie 资源路径添加到查询中</h3><p>新的资源路径将被添加到 query.js 文件中的 queryType 中。</p><pre class=" language-js"><code class="language-js">movie<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> movieType<span class="token punctuation">,</span>            args<span class="token punctuation">:</span> <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLInt <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            resolve<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> args<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>这个请求的返回类型是 movieType，args 参数用于指示 movie 资源路径的输入，这个资源路径的输入是 id，其类型为 <strong>GraphQLInt</strong>。resolve 函数从电影列表中返回与 id 相匹配的电影。<strong>find</strong> 是 lodash 中的一个函数，用于查找列表中的元素。</p><p>query.js 的完整代码如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> GraphQLObjectType<span class="token punctuation">,</span> GraphQLString<span class="token punctuation">,</span> GraphQLInt <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> movieType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./types.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> movies <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./data.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Define the Query</span><span class="token keyword">const</span> queryType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Query"</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> GraphQLString<span class="token punctuation">,</span>      resolve<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    movie<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> movieType<span class="token punctuation">,</span>      args<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLInt <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      resolve<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> args<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>queryType <span class="token operator">=</span> queryType<span class="token punctuation">;</span></code></pre><p>从上面的代码中，我们可以看到 <strong>movieType</strong> 实际上是在 types.js 中定义的。</p><h3 id="添加自定义类型-movieType"><a href="#添加自定义类型-movieType" class="headerlink" title="添加自定义类型 movieType"></a>添加自定义类型 movieType</h3><p>创建一个名为 types.js 的文件，并添加以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>  GraphQLObjectType<span class="token punctuation">,</span>  GraphQLID<span class="token punctuation">,</span>  GraphQLString<span class="token punctuation">,</span>  GraphQLInt<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Define Movie Type</span>movieType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Movie"</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLID <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>    year<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLInt <span class="token punctuation">}</span><span class="token punctuation">,</span>    directorId<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLID <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>movieType <span class="token operator">=</span> movieType<span class="token punctuation">;</span></code></pre><p>可以看出 <strong>movieType</strong> 是以 <strong>GraphQLObjectType</strong> 创建的，它有 4 个字段：id，name，year 和 directorId，在添加这些字段时，也会指定每个字段的类型。这些字段直接从数据中来的，在我们的这个例子中，它将来自电影列表。</p><h3 id="为-director-资源路径添加查询和类型"><a href="#为-director-资源路径添加查询和类型" class="headerlink" title="为 director 资源路径添加查询和类型"></a>为 director 资源路径添加查询和类型</h3><p>和 movie 一样，我们甚至还可以添加 director 资源路径。在 query.js 中，可以按如下方式添加 director 资源路径：</p><pre class=" language-js"><code class="language-js">director<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> directorType<span class="token punctuation">,</span>            args<span class="token punctuation">:</span> <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLInt <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            resolve<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>directors<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> args<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>可以在 types.js 中添加 directorType 代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Define Director Type</span>directorType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Director"</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLID <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLInt <span class="token punctuation">}</span><span class="token punctuation">,</span>    movies<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLList</span><span class="token punctuation">(</span>movieType<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>movies<span class="token punctuation">,</span> <span class="token punctuation">{</span> directorId<span class="token punctuation">:</span> source<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>等等，<strong>directorType</strong> 与 <strong>movieType</strong> 略有不同？这是为什么呢？为什么在 <strong>directorType</strong> 中有 resolve 函数？以前我们看到 resolve 函数只出现在查询中…</p><h3 id="directorType-的特殊性"><a href="#directorType-的特殊性" class="headerlink" title="directorType 的特殊性"></a>directorType 的特殊性</h3><p>当 <strong>director</strong> 资源路径被调用时，我们必须返回导演的详细信息，以及该导演指导的所有电影。directorType 中的前 3 个字段 id，name，age 直接从导演列表中获取数据，第 4 个字段 movies 需要包含这位导演的电影列表。为此，我们提到的 movies 字段的类型是 GraphQLList 中的 movieType。</p><p>但是我们究竟如何找到这位导演导演的所有电影呢？</p><p>为此，我们在 movies 字段里面定义了一个 resolve 函数，resolve 函数的输入参数是 source 和 args，source 将具有父对象的详细信息。</p><p>这时候我们让 director 的 id =1, name = “Random” ，age = 20，并且 source.id = 1，source.name =”Random”,source.age = 20。</p><p>因此，在这个例子中，resolve 函数找出了 directorId 与所需 Director 的 Id 匹配的所有影片。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/aditya-sridhar/graphql-with-nodejs" target="_blank" rel="noopener">GitHub repo</a> 提供了这个项目的完整代码。</p><h3 id="应用程序测试"><a href="#应用程序测试" class="headerlink" title="应用程序测试"></a>应用程序测试</h3><p>现在让我们测试不同场景的应用程序，使用 <code>node server.js</code> 运行这个程序，本地访问 localhost:5000/graphql 并尝试输入以下内容。</p><h3 id="movie"><a href="#movie" class="headerlink" title="movie"></a>movie</h3><p>输入：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token function">movie</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"movie"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Movie 1"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"director"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Director 1"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面我们可以看到客户端可以准确地请求它想要的数据，GraphQL 将确保只返回那些想要的参数。这里仅请求 <code>name</code> 字段，并且仅由服务器返回。</p><p>在 <code>movie(id:1)</code> 中，id 是输入参数，我们要求服务器返回 id 为 1 的电影。</p><p>输入：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token function">movie</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name    id    year  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"movie"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Movie 3"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>      <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2016</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的例子中，请求的字段是：name，id 和 year，所以服务器返回所有这些字段。</p><h3 id="director"><a href="#director" class="headerlink" title="director"></a>director</h3><p>输入：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token function">director</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name    id<span class="token punctuation">,</span>    age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"director"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Director 1"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输入：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token function">director</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name    id<span class="token punctuation">,</span>    age<span class="token punctuation">,</span>    movies<span class="token punctuation">{</span>      name<span class="token punctuation">,</span>      year    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"director"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Director 1"</span><span class="token punctuation">,</span>      <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      <span class="token string">"movies"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Movie 1"</span><span class="token punctuation">,</span>          <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2018</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Movie 2"</span><span class="token punctuation">,</span>          <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token number">2017</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面的例子，我们看到了 GraphQL 的强大功能。我们想要查找一个 id 为 1 的导演，另外，我们想要找出这位 id 为 1 的导演的所有电影。 director 和 movie 字段都是可定制的，客户可以准确地定制他们想要的字段。</p><p>同样，我们还可以扩展到其他字段和类型。例如，我们可以运行一个查询查找 id 为 1 的导演，并根据这位导演找到他所有的电影，再为每部电影找到相对应的演员，并且找出每个获得评级前 5 名的演员所参演的电影，依此类推。对于此查询，我们需要指定类型之间的关系，一旦我们这样做，客户端就可以查询它想要的任何关系。</p><h3 id="恭喜-😃"><a href="#恭喜-😃" class="headerlink" title="恭喜 😃"></a>恭喜 😃</h3><p>你现在已经了解了 <strong>GraphQL</strong> 的基本概念。你可以通过查看<a href="https://graphql.github.io/learn/" target="_blank" rel="noopener">官方文档</a>来了解有关 GraphQL 的更多信息。</p><h3 id="关于原作者"><a href="#关于原作者" class="headerlink" title="关于原作者"></a>关于原作者</h3><p>LinkedIn：<a href="https://www.linkedin.com/in/aditya1811/" target="_blank" rel="noopener">https://www.linkedin.com/in/aditya1811/</a></p><p>twitter：<a href="https://twitter.com/adityasridhar18" target="_blank" rel="noopener">https://twitter.com/adityasridhar18</a></p><p>个人网站：<a href="https://adityasridhar.com/" target="_blank" rel="noopener">https://adityasridhar.com/</a></p><p>原文地址：<a href="https://medium.freecodecamp.org/an-introduction-to-graphql-how-it-works-and-how-to-use-it-91162ecd72d0" target="_blank" rel="noopener">https://medium.freecodecamp.org/an-introduction-to-graphql-how-it-works-and-how-to-use-it-91162ecd72d0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> GraphQL </tag>
            
            <tag> 译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL入门指南</title>
      <link href="/2020/05/06/graphql/"/>
      <url>/2020/05/06/graphql/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/graphql/01.jpeg" alt="graphQL"></p><p>现如今最常讨论的技术之一便是 API，但是很多人并不知道什么是 API，简单的来说，API 代表应用程序编程接口（Application Programming Interface）。顾名思义，就是为开发者、用户、消费者提供数据交互的接口。</p><p>你可以将 API 视为调酒师，你向调酒师请求一杯酒，然后他为你调出你想要的酒。这看似非常简单，但是为什么会存在问题呢？</p><p>自现代网络发展以来，构建 API 并不像听起来那么难，但是学习和理解 API 却不是一件简单的事。很多开发者会使用 API 来构建某些内容，或者仅仅是使用数据。因此，API 应该尽可能简洁、直观。经过精心设计的 API 会非常易于学习和使用，同时也会很直观，所以在开始设计 API 时一定要记住这点。</p><p>一直以来我们都在使用 REST 来构建 API，随之也带来了一些问题。使用 REST 来设计构建 API 时，你将会面临以下问题：</p><ul><li>你需要访问很多资源路径</li><li>不易于开发者学习和理解API</li><li>存在信息过度或不足的问题</li></ul><p>为了解决这些问题，Facebook 创建了 GraphQL。现如今，我认为 GraphQL 是构建 API 的最佳方式，本文将会告诉你为什么我们现在需要学习 GraphQL。</p><p>通过这篇文章，你将学习到 GraphQL 的工作原理，同时我将向你展示如何使用 GraphQL创建设计良好、高效以及功能强大的 API。</p><p>在这之前你可能已经听过 GraphQL，因为有很多人和很多公司已经在使用 GraphQL。GraphQL 是开源的，因此它的社区已经变得非常强大。</p><p>那么现在，是时候开始在实践中学习 GraphQL 是如何工作的了，以及感受它的魔力啦~</p><h3 id="什么是GraphQL？"><a href="#什么是GraphQL？" class="headerlink" title="什么是GraphQL？"></a>什么是GraphQL？</h3><p><a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL</a> 是 Facebook 开发的一种开源查询语言。它为我们提供了一种更有效的方法来设计、创建和使用我们的 API，可以说它是 REST 的替代品。</p><p>GraphQL 有很多功能，例如：</p><ul><li>你可以定义你想要的数据，并获取你所需要的数据，不再像我们使用REST那样获取冗余数据。</li><li>它给我们提供单一的API资源路径, API升级不再需要区分版本。</li><li>GraphQL 是强类型的，你可以在执行之前在 GraphQL 类型系统中验证查询，它可以帮助我们构建更健壮的 API。</li></ul><p>这是一篇关于 GraphQL 为什么如此强大以及为何 GraphQL 如今获得了大量人气的基础介绍。如果你想了解更多关于 GraphQL 的信息，我建议你查看<a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL</a> 官网并查看它。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>本文的主要目的不是学习如何配置 GraphQL 服务器，所以我们现在还没有深入研究。而本文的主要目的在于了解GraphQL在实践中的工作原理，因此我们将使用一个名为 <a href="https://github.com/glennreyes/graphpack" target="_blank" rel="noopener">Graphpack</a> 的服务器。</p><p>在开始我们的项目前，我们需要创建一个新的文件夹，你可以随意命名，我打算将它命名为 graphql-server。</p><p>打开终端并输入：</p><pre class=" language-js"><code class="language-js">mkdir graphql<span class="token operator">-</span>server</code></pre><p>现在，你需要在你的电脑上安装 npm 或 yarn，npm 和 yarn 是编程语言 JavaScript 的包管理器，对于 Node.js，默认包管理器是 npm。</p><p>进入你创建的文件夹，输入以下命令：</p><pre class=" language-js"><code class="language-js">npm init <span class="token operator">-</span>y</code></pre><p>如果你使用的是 yarn，则输入以下命令：</p><pre class=" language-js"><code class="language-js">yarn init </code></pre><p>npm 将会为你自动创建一个 package.json 文件，你安装的所有依赖和命令都会在这个文件中。</p><p>现在，我们需要安装我们将要使用的唯一依赖项——Graphpack。</p><p><a href="https://github.com/glennreyes/graphpack" target="_blank" rel="noopener">Graphpack</a> 允许你创建零配置的 GraphQL 服务器，对于刚开始学习GraphQL 的我们来说这将帮助我们学习更多其他的内容，而不必担心复杂的服务器配置。</p><p>进入项目的根目录，在终端输入以下命令：</p><pre class=" language-js"><code class="language-js">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev graphpack</code></pre><p>如果你使用的是 yarn，则输入以下命令：</p><pre class=" language-js"><code class="language-js">yarn add <span class="token operator">--</span>dev graphpack</code></pre><p>安装完 graphpack 之后，找到 package.json 文件中 scripts 配置项，加入如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"graphpack"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"graphpack build"</span><span class="token punctuation">}</span></code></pre><p>我们将创建一个名为 src 的文件夹，它将成为整个服务器中唯一的文件夹。</p><p>创建完名为 src 的文件夹之后，我们接着在 src 文件夹下创建3个文件。首先创建名为schema.graphql 的文件，在这个文件中,加入如下代码：</p><pre class=" language-js"><code class="language-js">type Query <span class="token punctuation">{</span>  hello<span class="token punctuation">:</span> String<span class="token punctuation">}</span></code></pre><p>schema.graphql 文件将是整个 GraphQL 的架构，如果你不懂这是什么，别担心，我稍后会进行解释。</p><p>接着在 src 文件夹中新建第二个名为 resolvers.js 的文件，加入如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> users <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./db"</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>  Query<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Hello World!"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> resolvers<span class="token punctuation">;</span></code></pre><p>resolvers.js 文件是我们将 GraphQL 操作转换为数据的指令的方式。</p><p>最后，在 src 文件夹下创建第三个文件 db.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">"john@gmail.com"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Jane Doe"</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">"jane@gmail.com"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>在本教程中，我们没有使用真实的数据库，因此，db.js 文件将模拟数据库，仅用于学习的目的。</p><p>现在 src 文件夹应该如下：</p><pre class=" language-js"><code class="language-js">src  <span class="token operator">|</span><span class="token operator">--</span>db<span class="token punctuation">.</span>js  <span class="token operator">|</span><span class="token operator">--</span>resolvers<span class="token punctuation">.</span>js  <span class="token operator">|</span><span class="token operator">--</span>schema<span class="token punctuation">.</span>graphql</code></pre><p>如果你在终端运行 npm run dev 或者 yarn dev，你就会在终端看到以下输出：</p><p><img src="/images/graphql/02.png" alt="终端运行结果"></p><p>现在通过本地访问 localhost:4000，这意味着我们已经准备好开始在GraphQL中编写我们的第一个查询，变更和订阅。本地运行以后你可以看到 GraphQL Playground，这是一个功能强大的 GraphQL IDE，可用于更好的开发工作流程。如果你想了解更多关于GraphQL Playground，<a href="https://www.prisma.io/blog/introducing-graphql-playground-f1e0a018f05d/" target="_blank" rel="noopener">请点击这里</a></p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>GraphQL 有自己的语言类型，用于编写模式。这是一种称为模式定义语言（SDL）的人类可读模式语法。无论你使用何种技术，SDL 都是相同的，你可以将其用于你想要的任何语言或框架。</p><p>这种模式语言非常有用，因为它很容易就知道你的 API 将具有哪些类型，这样你可以通过正确的方式来理解它。</p><h3 id="类型（Types）"><a href="#类型（Types）" class="headerlink" title="类型（Types）"></a>类型（Types）</h3><p>类型是 GraphQL 最重要的特性之一，类型是自定义的对象，代表着 API 的外观。举个例子：如果你正在构建一个社交媒体应用程序，那么你的 API 应该具有 Posts，Users，Likes，Groups 等类型。</p><p>类型具有字段，这些字段返回特定类型的数据。例如，我们创建一个用户类型，那么这个用户类型应该具有 name， email 和 age 字段。类型字段可以是任何类型，并始终返回一种数据类型，如 Int，Float，String，Boolean，ID，对象类型列表或自定义对象类型。</p><p>现在我们开始编写我们的第一个类型，在 schema.graphql 文件用如下代码替换已存在的Query 类型：</p><pre class=" language-js"><code class="language-js">type User <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> ID<span class="token operator">!</span>  name<span class="token punctuation">:</span> String<span class="token operator">!</span>  email<span class="token punctuation">:</span> String<span class="token operator">!</span>  age<span class="token punctuation">:</span> Int<span class="token punctuation">}</span></code></pre><p>每个用户都将拥有一个 ID，因此我们给它提供了 ID 类型。用户也会有一个 name 和eamil，所以我们给它一个 String 类型，而 age 我们给它一个Int类型，很简单吧？</p><p>那么，每行末尾的!是什么意思呢？感叹号表示字段不能为空，这意味着每个字段必须在每个查询中返回一些数据，用户 User 类型中唯一可以为空的字段是 age。</p><p>在 GraphQL 中，将处理三个主要概念：</p><ul><li><p>查询（queries）：从服务器获取数据的方式。</p></li><li><p>变更（mutations）：修改服务器上的数据并获取更新的数据（创建，更新，删除）的方式。</p></li><li><p>订阅（subscriptions）：与服务器保持实时连接的方式。</p></li></ul><p>接下来我将会向你一一解释这些概念，让我们先从查询开始吧！</p><h3 id="查询（Queries）"><a href="#查询（Queries）" class="headerlink" title="查询（Queries）"></a>查询（Queries）</h3><p>简单的解释，GraphQL 中的查询就是你获取数据的方式。GraphQL 查询中最棒的事情之一就是可以获取到你所需的确切数据，不多也不少。这将对我们的 API 产生积极的影响——不再像使用 REST API 那样过度获取或提取不足的信息。</p><p>我们将在 GraphQL 中创建第一个类型的查询，我们所有的查询都将以此类型结束。首先，在 schema.graphql 编写一个名为 Query 的新类型：</p><pre class=" language-js"><code class="language-js">type Query <span class="token punctuation">{</span>  users<span class="token punctuation">:</span> <span class="token punctuation">[</span>User<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">}</span></code></pre><p>这很简单：users 查询将返回给我们一个或多个用户的数组，这个数组不会返回 null，因为我们给 users 加了!，这意味着 users 是一个不可为空的查询，它总是会返回数据。</p><p>但是我们也可以返回特定的用户，为此，我们将创建一个名为 user 的新查询。在我们的Query 类型中，写入以下代码：</p><pre class=" language-js"><code class="language-js"><span class="token function">user</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User<span class="token operator">!</span></code></pre><p>现在我们的 Query 类型应该如下所示：</p><pre class=" language-js"><code class="language-js">type Query <span class="token punctuation">{</span>  users<span class="token punctuation">:</span> <span class="token punctuation">[</span>User<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>  <span class="token function">user</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User<span class="token operator">!</span><span class="token punctuation">}</span></code></pre><p>如你所看到的，使用 GraphQL 中的查询，我们也可以传递参数。在这个例子中，我们要查询特定的用户，因此传递参数 ID。</p><p>但是，你可能会想：GraphQL 是怎么知道获取数据的具体位置的？这就是为什么我们还需要有一个 resolvers.js 文件，该文件告诉 GraphQL 它将如何以及从何处获取数据。</p><p>首先，在 resolvers.js 文件中导入刚刚创建的 db.js，这时你的 resolvers.js 文件应如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> users <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./db"</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>  Query<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Hello World!"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> resolvers<span class="token punctuation">;</span></code></pre><p>接着我们将创建第一个查询，找到 resolvers.js 文件并替换其中的 hello 函数。现在，你的查询类型应如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> users <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./db"</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>  Query<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    users<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> resolvers<span class="token punctuation">;</span></code></pre><p>现在，我将解释一下它是如何工作的：<br>每个查询解析器都有四个参数，在 user 函数中，我们将 id 作为参数传递，然后返回与传递的 id 匹配的特定用户，就是这么简单。而在 users 函数中，将返回已存在的 users 数组，它将始终给我们返回所有的用户。</p><p>我们将测试我们的查询是否运行正常，访问 localhost:4000 并输入以下代码：</p><pre class=" language-js"><code class="language-js">query <span class="token punctuation">{</span>  users <span class="token punctuation">{</span>    id    name    email    age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时候应该给我们返回所有的用户。</p><p>或者，如果要返回特定用户：</p><pre class=" language-js"><code class="language-js">query <span class="token punctuation">{</span>  <span class="token function">user</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    id    name    email    age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，我们将开始学习变更（<strong>mutations</strong>），这是 GraphQL 中最重要的功能之一。</p><h3 id="变更（Mutations）"><a href="#变更（Mutations）" class="headerlink" title="变更（Mutations）"></a>变更（Mutations）</h3><p>在 GraphQL 中，mutations 是你修改服务器上的数据并获取更新数据的方式，你可以把它跟 REST 中的 CUD（创建，更新，删除）一样思考。</p><p>我们将在 GraphQL 中创建我们的第一个类型变更，我们所有的变更都将以这种类型结束。在 schema.graphql 文件中编写一个名为 mutation 的新类型：</p><pre class=" language-js"><code class="language-js">type Mutation <span class="token punctuation">{</span>  <span class="token function">createUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">:</span> User<span class="token operator">!</span>  <span class="token function">updateUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> String<span class="token punctuation">,</span> email<span class="token punctuation">:</span> String<span class="token punctuation">,</span> age<span class="token punctuation">:</span> Int<span class="token punctuation">)</span><span class="token punctuation">:</span> User<span class="token operator">!</span>  <span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User<span class="token operator">!</span><span class="token punctuation">}</span></code></pre><p>正如你所见，我们将有三个变更：</p><p>createUser：我们应该传递一个 id，name，email 和 age，它将会为我们创建一个新的用户。</p><p>updateUser：我们应该传递一个 id，一个新的 name，email 或 age，它将会为我们返回一个新用户。</p><p>deleteUser：我们应该传递一个 id，它将会为我们返回一个新用户。</p><p>现在，在 resolvers.js 文件中的 Query 对象下面，创建一个新的变更对象，如下所示</p><pre class=" language-js"><code class="language-js">Mutation<span class="token punctuation">:</span> <span class="token punctuation">{</span>    createUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    updateUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newUser <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">return</span> newUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    deleteUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> userIndex <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>userIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"User not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> deletedUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>userIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> deletedUsers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>现在，resolvers.js 文件应如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> users <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./db"</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>  Query<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    users<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  Mutation<span class="token punctuation">:</span> <span class="token punctuation">{</span>    createUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> newUser <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newUser<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    updateUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newUser <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>      newUser<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">return</span> newUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    deleteUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> userIndex <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>userIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"User not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> deletedUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>userIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> deletedUsers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> resolvers<span class="token punctuation">;</span></code></pre><p>接着，我们将测试我们的 mutations 是否正常工作，访问 localhost:4000 并输入以下代码</p><pre class=" language-js"><code class="language-js">mutation <span class="token punctuation">{</span>  <span class="token function">createUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Robert"</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">"robert@gmail.com"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    id    name    email    age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它将会返回给我们一个新的用户，如果你想尝试创建新的的 mutations，我建议你可以自己动手尝试一下！尝试删除你所创建的同一用户，看看它是否正常工作。</p><p>最后，我们将开始学习订阅（<strong>subscriptions</strong>），以及学习为什么它是如此的强大。</p><h3 id="订阅（Subscriptions）"><a href="#订阅（Subscriptions）" class="headerlink" title="订阅（Subscriptions）"></a>订阅（Subscriptions）</h3><p>正如我之前所说，订阅（subscriptions）是你与服务器保持实时连接的方式。这意味着无论何时在服务器中发生事件，并且每当调用该事件时，服务器都会将相应的数据发送到客户端。</p><p>通过使用订阅，你可以保持你的应用在不同的用户之间得到最新的更改。</p><p><img src="/images/graphql/03.png" alt="image"></p><p>基本的订阅应该如下：</p><pre class=" language-js"><code class="language-js">subscription <span class="token punctuation">{</span>  users <span class="token punctuation">{</span>    id    name    email    age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你可能会说它与查询非常相似，是的，但它们的工作方式不同。当服务器中的某些内容更新时，服务器将运行订阅中指定的GraphQL查询，并将新更新的结果发送到客户端。</p><p>我们并不打算在这篇文章中使用订阅，但是如果你想了解更多关于它的信息，<a href="https://hackernoon.com/from-zero-to-graphql-subscriptions-416b9e0284f3" target="_blank" rel="noopener">请点击此处</a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>正如你所见，GraphQL 是一项非常强大的新技术。它为我们提供了构建更好的 API 的真正能力。这就是为什么我建议你现在就开始学习 GraphQL，对我来说，它最终将取代REST。</p><p>🐦<a href="https://twitter.com/leonardomso" target="_blank" rel="noopener">在推特上关注原作者！</a></p><p>⭐<a href="https://github.com/leonardomso" target="_blank" rel="noopener">在GitHub上关注原作者！</a></p><p>原文地址：<a href="https://medium.freecodecamp.org/a-beginners-guide-to-graphql-86f849ce1bec" target="_blank" rel="noopener">https://medium.freecodecamp.org/a-beginners-guide-to-graphql-86f849ce1bec</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> GraphQL </tag>
            
            <tag> 译文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shadow DOM</title>
      <link href="/2020/05/06/shadow-dom/"/>
      <url>/2020/05/06/shadow-dom/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/shadowdom01.png" alt=""></p><p>这是专门探索 JavaScript 及其构建组件的系列文章的第 17 篇。在识别和描述核心元素的过程中，我们还分享了构建 <a href="https://www.sessionstack.com/?utm_source=medium&utm_medium=blog&utm_content=js-series-parsing-intro" target="_blank" rel="noopener">SessionStack</a> 时使用的一些经验法则，这是一个 JavaScript 应用程序，需要强大且较高性能，以帮助用户实时查看和重现他们的 Web 应用程序的缺陷。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Web Components 是一套不同的技术，允许创你建可重用的自定义元素。它们的功能是隔离其他代码，让你可以在 Web 应用程序中使用它们。</p><p>Web Components 有 4 个标准：</p><ul><li>Shadow DOM</li><li>HTML Templates</li><li>Custom elements</li><li>HTML Imports</li></ul><p>在本文中，我们将重点关注 <strong>Shadow DOM</strong>。</p><p>Shadow DOM 是被设计为用于构建基于组件的应用程序的工具，它为你能遇到的 Web 开发中的常见问题提供了解决方案：</p><ul><li>隔离 DOM：组件的 DOM 是自包含的（例如，document.querySelector()，不会返回组件的 shadow DOM 中的节点）。这也简化了 Web 应用程序中的 CSS 选择器，因为 DOM 组件是隔离的，它使你能够使用更通用的 id 或者 class 而无需担心命名冲突。</li><li>Scoped CSS：在 shadow DOM 中定义的 CSS 是具有作用域的，样式规则不会泄漏，页面样式不会干扰它。</li><li>Composition：为你的组件设计一个基于标记的声明式 API。</li></ul><h3 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h3><p>本文假设你已经熟悉 DOM 及其 API 的概念，如果你还不了解 DOM，你可以在这里阅读一篇关于它的详细文章——<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction</a>。</p><p>除了以下两个不同之处外，Shadow DOM 只是一个普通的 DOM：</p><ul><li>与你创建和使用 DOM 的方式相比，Shadow DOM 关注的是如何创建以及使用它与页面的其余部分的相关</li><li>以及 Shadow DOM 与页面其余部分的关系是如何表现的</li></ul><p>通常，你创建 DOM 节点并将它们作为子节点添加到另一个元素上。在 shadow DOM 的情况下，你创建一个添加到元素范围的 DOM 树，但它与实际的子元素分开。这个作用域的子树称为 <strong>shadow tree</strong>，它添加的元素是它的 <strong>shadow host</strong>。你添加到 shadow tree 的任何内容都将成为托管元素的本地元素，包括 <code>&lt;style&gt;</code> 标签，这就是 shadow DOM 实现 CSS scope 样式的方式。</p><h3 id="创建-Shadow-DOM"><a href="#创建-Shadow-DOM" class="headerlink" title="创建 Shadow DOM"></a>创建 Shadow DOM</h3><p><strong>shadow root</strong> 是一个添加到 “host” 元素的文档片段。添加 shadow root 的那一刻并是元素获得 shadow DOM 的时刻，要为元素创建 shadow DOM，请调用 <code>element.attachShadow()</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> header <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> shadowRoot <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> paragraphElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphElement<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"Shadow DOM"</span><span class="token punctuation">;</span>shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>paragraphElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="http://w3c.github.io/webcomponents/spec/shadow/#h-methods" target="_blank" rel="noopener">specification</a>定义了无法托管 <strong>shadow root</strong> 的元素列表。</p><h3 id="Shadow-DOM-中的-Composition"><a href="#Shadow-DOM-中的-Composition" class="headerlink" title="Shadow DOM 中的 Composition"></a>Shadow DOM 中的 Composition</h3><p>Composition 是 Shadow DOM 中最重要的特征之一。</p><p>编写 HTML 时，Composition 是构建 Web 应用程序的方式。你可以组合并嵌套不同的元素，例如<code>&lt;div&gt;</code>，<code>&lt;header&gt;</code>，<code>&lt;form&gt;</code> 等，以构建 Web 应用程序所需的 UI，其中一些标签甚至可以互相协作。</p><p>Composition 定义了为什么元素（如 <code>&lt;select&gt;</code>，<code>&lt;form&gt;</code>，<code>&lt;video&gt;</code>等）是灵活的，并接受特定的 HTML 元素作为子元素，以便对它们做一些特殊的事情。</p><p>例如，<code>&lt;select&gt;</code> 知道如何将 <code>&lt;option&gt;</code> 元素渲染到具有预定义项的下拉窗口选项中。</p><p>Shadow DOM 引入了以下可用于实现 Composition 的功能。</p><h3 id="Light-DOM"><a href="#Light-DOM" class="headerlink" title="Light DOM"></a>Light DOM</h3><p>这是组件用户写入的标记，这个 DOM 位于组件的 shadow DOM 之外，这是元素的实际的子元素。想象一下，你已经创建了一个名为 <code>&lt;better-button&gt;</code> 的自定义组件，它扩展了原生 HTML 按钮，你想要在其中添加图像和一些文本。代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>extended<span class="token operator">-</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> the image and span are extended<span class="token operator">-</span>button's light DOM <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"boot.png"</span> slot<span class="token operator">=</span><span class="token string">"image"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>span<span class="token operator">></span>Launch<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>extended<span class="token operator">-</span>button<span class="token operator">></span></code></pre><p>“extended-button” 是你定义的自定义组件，而其中的 HTML 就称为 Light DOM，是由组件的用户添加的。</p><p>这里的 Shadow DOM 是你已经创建的组件（”extended-button”）。 Shadow DOM 是组件的基础，它定义了它的内部结构，作用域 CSS，并封装了你的实现细节。</p><h3 id="扁平的-DOM-树"><a href="#扁平的-DOM-树" class="headerlink" title="扁平的 DOM 树"></a>扁平的 DOM 树</h3><p>浏览器将 Light DOM（由用户创建的 DOM）分配到你的 shadow DOM 中，并定义了自定义组件的结果来呈现最终产品。扁平树是你最终在 DevTools 中看到的以及页面上呈现的内容。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>extended<span class="token operator">-</span>button<span class="token operator">></span>  #shadow<span class="token operator">-</span>root  <span class="token operator">&lt;</span>style<span class="token operator">></span>…<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"image"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"boot.png"</span> slot<span class="token operator">=</span><span class="token string">"image"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span>      <span class="token operator">&lt;</span>span<span class="token operator">></span>Launch<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>extended<span class="token operator">-</span>button<span class="token operator">></span></code></pre><h3 id="模板（template）"><a href="#模板（template）" class="headerlink" title="模板（template）"></a>模板（template）</h3><p>当你必须在网页上重复使用相同的标记结构时，最好使用某种模板而不是一遍又一遍地重复相同的结构。在之前这是可能的，HTML 中的<code>&lt;template&gt;</code> 元素（在现代浏览器中得到了很好的支持）使它变得更加容易。此元素及其内容不会在 DOM 中呈现，但仍可使用 JavaScript 来引用它。</p><p>让我们看一个简单的例子：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"my-paragraph"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span> Paragraph content<span class="token punctuation">.</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>在你使用 JavaScript 引用它之前，它不会出现在你的页面中，然后使用以下方法将其添加到 DOM：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"my-paragraph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> templateContent <span class="token operator">=</span> template<span class="token punctuation">.</span>content<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>templateContent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到目前为止，已经有其他技术可以实现类似的行为，但是，如前所述，将其本身包含在内是非常好的。并且 template 也有相当不错的浏览器支持：</p><p><img src="images/shadowdom03.png" alt="shadowdom02"></p><p>template 本身很有用，但它使用自定义元素可以更好地工作。我们将在本系列的另一篇文章中讲述自定义元素，暂时你应该知道浏览器中的<code>customElement</code> API 允许你使用自定义渲染定义自己的标记。</p><p>让我们定义一个 Web 组件，它使用我们的模板作为其 shadow DOM 的内容，我们称之为 <code>&lt;my-paragraph&gt;</code>：</p><pre class=" language-js"><code class="language-js">customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>  <span class="token string">"my-paragraph"</span><span class="token punctuation">,</span>  <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"my-paragraph"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> templateContent <span class="token operator">=</span> template<span class="token punctuation">.</span>content<span class="token punctuation">;</span>      <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mode<span class="token punctuation">:</span> <span class="token string">"open"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>        templateContent<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里要注意的关键点是我们将模板内容克隆添加到 shadow root，它是使用 <code>Node.cloneNode()</code> 方法创建的。</p><p>因为我们将其内容添加到 shadow DOM 中，所以可以在模板中的 <code>&lt;style&gt;</code> 元素中包含一些样式信息，然后将其封装在自定义元素中。如果只是将它添加到标准 DOM 中，这将不起作用。</p><p>例如，可以将模板更改为以下内容：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-paragraph<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Paragraph content. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>现在，我们可以像这样使用模板定义的自定义组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-paragraph</span> <span class="token punctuation">/></span></span></code></pre><h3 id="Slots（插槽）"><a href="#Slots（插槽）" class="headerlink" title="Slots（插槽）"></a>Slots（插槽）</h3><p>Template 有一些缺点：主要是静态内容，它不允许渲染我们的变量或者数据，以使其按照你习惯使用的标准 HTML 模板的方式工作。</p><p>这就是 <code>&lt;slot&gt;</code> 出现的原因。你可以将插槽视为占位符，允许你将自己的 HTML 放在模板中，这允许你创建通用的 HTML 模板，然后通过添加插槽使其可自定义。</p><p>让我们看看上面所说的模板与插槽结合的代码是什么样的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-paragraph<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Default text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>如果在元素包含在标记中时未定义插槽的内容，或者如果浏览器不支持插槽，则 <code>&lt;my-paragraph&gt;</code> 将仅包含“默认文本”。</p><p>要定义插槽的内容，我们应该在 <code>&lt;my-paragraph&gt;</code> 元素中包含一个 HTML 结构，其中 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-slot" target="_blank" rel="noopener">slot</a> 属性的值等于我们希望它填充的插槽的名称。</p><p>和以前一样，你可以添加你喜欢的任何内容：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-paragraph</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Let's have some different text!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-paragraph</span><span class="token punctuation">></span></span></code></pre><p>可以插入插槽的元素称为 Slotable，当一个元素插入一个插槽时，它被称为 slotted。</p><p>请注意，在上面的示例中，我们插入了一个 <code>&lt;span&gt;</code> 元素，它是一个开槽元素。它有一个属性 <code>slot</code>，它的值为 “my-text”，它与模板槽定义中 <code>name</code> 属性的值相同。</p><p>在浏览器中呈现后，上面的代码将创建以下扁平 DOM 树：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-paragraph</span><span class="token punctuation">></span></span>  #shadow-root  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Let's have some different text!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-paragraph</span><span class="token punctuation">></span></span></code></pre><p>注意 <code>＃shadow-root</code> 元素——它只是 Shadow DOM 存在的指示符。</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>使用 shadow DOM 的组件可以由主页面设置样式，可以定义自己的样式，或者以 CSS 自定义属性的形式提供钩子，以便用户覆盖默认样式。</p><h3 id="组件定义的样式"><a href="#组件定义的样式" class="headerlink" title="组件定义的样式"></a>组件定义的样式</h3><p>Scoped CSS 是 Shadow DOM 的最大特色之一：</p><ul><li>外部页面中的 CSS 选择器不适用于组件内部。</li><li>组件内定义的样式不会影响页面的其余部分，它们作用的范围是宿主素。</li></ul><p>Shadow DOM 中使用的 CSS 选择器应用于组件。实际上，这意味着我们可以再次使用常见的 id 或者 class 名称，而不必担心页面上其他地方的冲突，简单的 CSS 选择器意味着更好的性能。</p><p>让我们看一下定义了一些样式的 <code>＃shadow-root</code>：</p><pre class=" language-html"><code class="language-html">#shadow-root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#container-items</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>上面示例中的所有样式都是 <code>＃shadow-root</code> 的本地样式，你还可以使用 <code>&lt;link&gt;</code> 元素在 <code>＃shadow-root</code> 中包含样式表，这些样式表也是本地的。</p><h3 id="host-伪类"><a href="#host-伪类" class="headerlink" title=":host 伪类"></a>:host 伪类</h3><p>:host 允许你选择并设置 shadow tree 的元素的样式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token pseudo-class">:host</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* by default, custom elements are display: inline */</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>在涉及到以下内容时，你应该注意 <code>:host</code> ——父页面中的规则具有比 :host 规则中定义的内容更高的优先级。这允许用户从外部覆盖你的顶级样式。此外，<code>:host</code> 仅在 shadow root 的上下文中工作，因此你不能在 Shadow DOM 之外使用它。</p><p>函数形式 <code>:host(&lt;selector&gt;)</code> 允许你在与 <code>&lt;selector&gt;</code> 匹配时定位 host 伪类。这是组件封装响应用户交互或状态的行为以及基于 host 伪类设置内部节点样式的好方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token pseudo-class">:host</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token pseudo-class">:host(:hover)</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token pseudo-class">:host([disabled])</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* style when host has disabled attribute. */</span>    <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>    <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token pseudo-class">:host(.pink)</span> > <span class="token id">#tabs</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* color internal #tabs node when host has class="pink". */</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="主题和元素-host-context-伪类"><a href="#主题和元素-host-context-伪类" class="headerlink" title="主题和元素:host-context() 伪类"></a>主题和元素:host-context(<selector>) 伪类</h3><p><code>:host-context(&lt;selector&gt;)</code> 伪类与 宿主元素匹配（如果后者或其任何祖先与 <code>&lt;selector&gt;</code> 匹配）。</p><p>对此的常见用途是主题，例如，许多人通过将类应用于 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 来进行主题化：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lightheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-container</span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-container</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><code>:host-context(.lightheme)</code> 在类是 <code>.lightheme</code> 的后代元素时会设置 <code>&lt;fancy-tabs&gt;</code> 的样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:host-context(.lightheme)</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>:host-context()</code> 可以用于主题，但更好的方法是使用 <a href="https://developers.google.com/web/fundamentals/web-components/shadowdom#stylehooks" target="_blank" rel="noopener">CSS 自定义属性创建样式钩子</a>。</p><h3 id="从外部设置组件的宿主元素的样式"><a href="#从外部设置组件的宿主元素的样式" class="headerlink" title="从外部设置组件的宿主元素的样式"></a>从外部设置组件的宿主元素的样式</h3><p>你可以通过使用它们的标记名称作为选择器从外部设置组件的宿主元素，如下所示：</p><pre class=" language-css"><code class="language-css"><span class="token selector">custom-container </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="外部样式的优先级高于-Shadow-DOM-中定义的样式。"><a href="#外部样式的优先级高于-Shadow-DOM-中定义的样式。" class="headerlink" title="外部样式的优先级高于 Shadow DOM 中定义的样式。"></a>外部样式的优先级高于 Shadow DOM 中定义的样式。</h4><p>例如，如果用户编写选择器：</p><pre class=" language-css"><code class="language-css"><span class="token selector">custom-container </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它将覆盖组件的规则：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:host</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>样式化组件本身只能让你实现到现在这样，但是如果要为组件的内部构造样式会发生什么呢？为此，我们需要 CSS 自定义属性。</p><h3 id="使用-CSS-自定义属性创建-style-hooks"><a href="#使用-CSS-自定义属性创建-style-hooks" class="headerlink" title="使用 CSS 自定义属性创建 style hooks"></a>使用 CSS 自定义属性创建 style hooks</h3><p>如果组件的作者使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">CSS custom properties</a>提供的样式钩子，则用户可以调整内部样式。</p><p>这个想法与 <code>&lt;slot&gt;</code> 类似，但适用于样式。<br>我们来看看下面的例子：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- main page --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">custom-container </span><span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>     - <span class="token property">custom-container-bg</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-container</span> <span class="token attr-name">background</span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-container</span><span class="token punctuation">></span></span></code></pre><p>在 Shadow DOM 中：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:host([background])</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span> - custom-container-bg, <span class="token hexcode">#cecece</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这种情况下，组件将使用黑色作为背景值，因为用户提供了它。否则，它将默认为#CECECE。作为组件作者，你负责让开发人员了解他们可以使用的 CSS 自定义属性并将其视为组件公共接口的一部分。</p><h3 id="插槽-API"><a href="#插槽-API" class="headerlink" title="插槽 API"></a>插槽 API</h3><p>Shadow DOM API 提供了使用插槽的实用程序。</p><h3 id="slotchange-事件"><a href="#slotchange-事件" class="headerlink" title="slotchange 事件"></a>slotchange 事件</h3><p>当插槽的分布式节点发生更改时，会切换 slotchange 事件。例如，如果用户从 Light DOM 添加或删除子项。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> slot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#some_slot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>slot<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"slotchange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Light DOM change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要监听 light DOM 的其他类型的更改，可以在元素的构造函数中使用 <code>MutationObserver</code>。我们之前已经讨论过 <a href="https://blog.sessionstack.com/how-javascript-works-tracking-changes-in-the-dom-using-mutationobserver-86adc7446401" target="_blank" rel="noopener">MutationObserver 的内部以及如何使用它</a>。</p><h3 id="assignedNodes-方法"><a href="#assignedNodes-方法" class="headerlink" title="assignedNodes() 方法"></a>assignedNodes() 方法</h3><p>知道哪些元素与插槽相关联可能很有用，调用 <code>slot.assignedNodes()</code> 方法，可以为你提供插槽所呈现的元素。 <code>{flatten: true}</code> 选项还将返回插槽的后备内容（如果没有分发节点）。</p><p>我们来看下面的例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Default content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span></code></pre><p>我们假设这是一个名为 <code>&lt;my-container&gt;</code> 的组件，让我们来看看这个组件的不同用法以及调 <code>assignedNodes()</code> 的结果：</p><p>在第一种情况下，将我们自己的内容添加到插槽中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-container</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> container text <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-container</span><span class="token punctuation">></span></span></code></pre><p>调用 <code>assignedNodes()</code> 将返回 <code>[&lt;span slot =&quot;slot1&quot;&gt; container text &lt;/span&gt;]</code>，请注意，结果是一个节点数组。</p><p>在第二种情况下，我们将内容留空：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-container</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-container</span><span class="token punctuation">></span></span></code></pre><p>调用 <code>assignedNodes()</code> 的结果将返回一个空数组[]。</p><p>但是，如果你为同一元素传递 <code>{flatten: true}</code> 参数，则会得到默认内容：<code>[&lt;p&gt;Default content&lt;/p&gt;]</code>。</p><p>此外，要访问插槽内的元素，可以调用 <code>assignedNodes()</code> 以查看元素分配给了哪个组件的插槽。</p><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><p>有趣的是要注意当 Shadow DOM 中发生事件冒泡时会发生什么。调整事件的目标以维持 Shadow DOM 提供的封装。当事件被重新定位时，它看起来像是来自组件本身，而不是作为组件一部分的 Shadow DOM 中的内部元素。</p><p>以下是从 Shadow DOM 中包含的事件列表（有些事件没有）：</p><ul><li><strong>焦点 事件</strong>：blur, focus, focusin, focusout</li><li><strong>鼠标事件</strong>：click, dblclick, mousedown, mouseenter, mousemove 等</li><li><strong>Wheel 事件</strong>：wheel</li><li><strong>Input 事件</strong>：beforeinput, input</li><li><strong>键盘事件</strong>：keydown,keyup</li><li><strong>Composition 事件</strong>：compositionstart, compositionupdate, compositionend</li><li><strong>拖拽事件</strong>： dragstart, drag, dragend, drop 等</li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>默认情况下，自定义事件不会传递到 Shadow DOM 之外。如果想要分发自定义事件并希望它传递，则需要添加 <code>bubbles: true</code> 和 <code>composition: true</code> 作为选项。</p><p>让我们看看如何分发这样的事件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shadowRoot<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"containerchanged"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> composed<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器支持情况：</p><p>要检测 Shadow DOM 是否是受浏览器支持的，请检查是否存在 attachShadow：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> supportsShadowDOMV1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>HTMLElement<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>attachShadow<span class="token punctuation">;</span></code></pre><p><img src="/images/shadowdom02.png" alt=""></p><p>通常，Shadow DOM 的行为方式与 DOM 是完全不同的。我们从 SessionStack 库的经验中得到了第一手的例子。我们将库集成到 Web 应用程序中以收集用户事件，网络数据，异常，调试消息，DOM 更改等数据，并将此数据发送到我们的服务器。</p><p>之后，我们处理收集的数据，以便你使用 SessionStack 重现产品中发生的问题。</p><p>使用 Shadow DOM 产生的困难如下：我们必须监听每个 DOM 的更改，以便以后能够正确地重新放置它。我们通过使用 <code>MutationObserver</code> 来做到这一点。但是，Shadow DOM 不会在全局范围内触发 <code>MutationObserver</code> 事件，这意味着我们需要以不同方式处理这些组件。</p><p>如果你想试试 <a href="https://www.sessionstack.com/solutions/developers/?utm_source=medium&utm_medium=blog&utm_content=shadow-dom" target="_blank" rel="noopener">SessionStack</a>，有一个免费的平台。</p><p><img src="/images/shadowdom04.png" alt=""></p><p>参考：</p><ul><li>(<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM)[https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM]" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM)[https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM]</a></li><li>(<a href="https://developers.google.com/web/fundamentals/web-components/shadowdom)[https://developers.google.com/web/fundamentals/web-components/shadowdom]" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/web-components/shadowdom)[https://developers.google.com/web/fundamentals/web-components/shadowdom]</a></li><li>(<a href="https://developers.google.com/web/fundamentals/web-components/shadowdom)[https://developers.google.com/web/fundamentals/web-components/shadowdom]" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/web-components/shadowdom)[https://developers.google.com/web/fundamentals/web-components/shadowdom]</a></li><li>(<a href="https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host)[https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host]" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host)[https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host]</a></li></ul><p>原文链接：<a href="https://blog.sessionstack.com/how-javascript-works-the-internals-of-shadow-dom-how-to-build-self-contained-components-244331c4de6e" target="_blank" rel="noopener">https://blog.sessionstack.com/how-javascript-works-the-internals-of-shadow-dom-how-to-build-self-contained-components-244331c4de6e</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Shadow DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 创建对象</title>
      <link href="/2020/05/06/create-object/"/>
      <url>/2020/05/06/create-object/</url>
      
        <content type="html"><![CDATA[<blockquote><p>虽然使用 Object 构造函数或对象字面量都可以用来创建单个函数，但是有一个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。于是出现其他的方式来创建对象，主要有以下 6 种方式：</p></blockquote><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 new 操作符，相当于经历了以下四个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（this 指向新的对象）</li><li>执行构造山函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ol><p>t1 有一个 constructor 属性，该属性指向 Test：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>此实例中创建的对象是 Object 的实例，同时也是 Test 的实例，可以通过 instanceof 操作符来验证：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1 <span class="token keyword">instanceof</span> <span class="token class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>任何函数，只要通过 new 操作符来调用的函数，那么它就可以作为构造函数。如果上面的 Test 函数不适用 new 来调用，那么它的属性和方法都会被添加到 window 对象上：</p><pre class=" language-js"><code class="language-js"><span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"alice"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// alice</span></code></pre><p>构造函数模式缺点：</p><p>每个方法都要在每个实例上重新创建一遍,方法无法共享。</p><pre class=" language-js"><code class="language-js">t1<span class="token punctuation">.</span>sayName <span class="token operator">==</span> t2<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> t2<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h5><p>只要创建了一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象</p><p><img src="./images/1.png" alt="image"></p><p>hasOwnProperty()方法可以用来检测一个属性是存在实例中还是存在于原型中：</p><pre class=" language-js"><code class="language-js">t1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>t1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"amx"</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>优点：可以让所有对象实例共享它所包含的属性和方法</p><h4 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h4><p>构造函数模式用于定义实例属性，原型模式用于定义方法和共性的属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Test<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> Test<span class="token punctuation">,</span>  sayName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green"]</span>t2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue"]</span>t1<span class="token punctuation">.</span>colors <span class="token operator">===</span> t2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>t1<span class="token punctuation">.</span>sayName <span class="token operator">===</span> t2<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h4 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Test<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may</span></code></pre><h4 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h4><p>创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后返回新创建的对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may</span></code></pre><h4 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2020/05/06/inherit/"/>
      <url>/2020/05/06/inherit/</url>
      
        <content type="html"><![CDATA[<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>原型链是实现继承的主要方法。</p><p>基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SubType<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继承 SuperType</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>调用 instance.getSuperValue()会经历三个步骤：</p><ol><li>搜索实例</li><li>实例上找不到，搜索 SubType.prototype</li><li>搜索 SuperType.prototype，找到 getSuperValue()方法，结束搜索</li></ol><p>原型搜索机制：<br>当访问一个实例属性时，首先会在实例中搜索该属性。如果没有找到该属性，则继续搜索该实例的原型。在通过原型链实现继承的情况下，搜索过程就会沿着原型链继续向上。在找不到属性或方法的情况下，搜索过程要一直进行到原型链末端才会停下来。</p><p>原型链缺点：<br>包含引用类型值的原型属性会被所有实例共享</p><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green"]</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green", "yellow"]</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green"]</span></code></pre><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>结合原型链和借用构造函数，使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二次调用 SuperType()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次调用 SuperType()</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//may</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["red", "blue", "green", "yellow"]</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"alice"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// alice</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["red", "blue", "green"]</span></code></pre><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>借助原型可以基于已有对象创建新对象，同时还不必因此创建自定义类型。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"may"</span><span class="token punctuation">,</span>  friend<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"max"</span><span class="token punctuation">,</span> <span class="token string">"kimi"</span><span class="token punctuation">,</span> <span class="token string">"judy"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> anotherP <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherP<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"bob"</span><span class="token punctuation">;</span>anotherP<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yetAnotherP <span class="token operator">=</span> <span class="token function">inheritObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>yetAnotherP<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"bob2"</span><span class="token punctuation">;</span>yetAnotherP<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anotherP<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bob</span>anotherP<span class="token punctuation">.</span>friend<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["max", "kimi", "judy", "rose", "jack"]</span>yetAnotherP<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bob2</span>yetAnotherP<span class="token punctuation">.</span>friend<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["max", "kimi", "judy", "rose", "jack"]</span>person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//may</span>person<span class="token punctuation">.</span>friend<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["max", "kimi", "judy", "rose", "jack"]</span></code></pre><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>  clone<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"may"</span><span class="token punctuation">,</span>  friend<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"max"</span><span class="token punctuation">,</span> <span class="token string">"kimi"</span><span class="token punctuation">,</span> <span class="token string">"judy"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> anotherP <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherP<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hi</span>anotherP<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may</span>anotherP<span class="token punctuation">.</span>friend<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["max", "kimi", "judy"]</span></code></pre><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>寄生式继承+构造函数式继承</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inheritPropotype</span><span class="token punctuation">(</span>subType<span class="token punctuation">,</span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span>  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inheritPropotype</span><span class="token punctuation">(</span>SuperType<span class="token punctuation">,</span> SubType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"may"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green"]</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/2020/05/06/clone/"/>
      <url>/2020/05/06/clone/</url>
      
        <content type="html"><![CDATA[<p>在JavaScript中，对于Object和Array这类引用类型值，当从一个变量向另一个变量复制引用类型值时，这个值的副本其实是一个指针，两个变量指向同一个堆内存，改变其中一个变量，另一个也会受到影响。</p><ul><li><h3 id="数组的浅拷贝"><a href="#数组的浅拷贝" class="headerlink" title="数组的浅拷贝"></a>数组的浅拷贝</h3></li></ul><p>所以数组的浅拷贝就是拷贝原对象的<strong>引用</strong>，因此只要其中一个数组改变，另一个数组也会跟着改变。</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3]</span>    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span></code></pre><p>但是在浅拷贝的这个问题上，有一点必须要说明：就是很多网上的文章说slice()和concat()方法是深拷贝，一开始我相信了，因为自己也亲自测试了一下:</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1, 2, 3]</span>    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1, 2, 3]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3, 5]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span></code></pre><p>根据打印出来的结果，我觉得是这样的没错！concat()方法也是一样的，就不再贴代码了。本来就打算这样相信下去，直到我看到了这篇文章<a href="https://segmentfault.com/a/1190000008637489" target="_blank" rel="noopener">JavaScript中的浅拷贝和深拷贝</a><br>才发现似乎有点问题，话不多说，直接上代码：</p><pre class=" language-js"><code class="language-js">   <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'may'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['may',{age:18}];</span>   arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'lee'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['may',{age:18}]</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:18}]</span>   arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['lee',{age:20}]</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['may',{age:20}]</span></code></pre><p>这一打印，才发现怎么和说好的不一样呢，arr2的age改变了，怎么arr的age也改变了呢，我也是百思不得其解。后来转念一想，直接去官方查看slice()的用法呀！<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">Array.prototype.slice()</a><br>这一查才终于豁然开朗了，MDN官方的解释是：</p><p>slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分<strong>浅拷贝</strong>到一个新数组对象。且原始数组不会被修改。</p><p>原来是这样，注意slice() 和concat()都是<strong>浅拷贝</strong>，再看slice()的拷贝规则：</p><pre><code> * 如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象    引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生    改变。  * 对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值     到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</code></pre><p>这才终于茅塞顿开，简单的来说就是如果数组里面的元素含有引用类型，那么只要其中一个数组中的引用类型改变，另一个数组中的引用类型也会跟着改变；如果数组里面的元素是基本类型，那么两个数组将互不影响。多么痛的领悟，这也就告诉我们解决问题要先看官方解释，而不是直接在网上搜索，有时候反而会被误导。</p><ul><li><h3 id="数组的深拷贝"><a href="#数组的深拷贝" class="headerlink" title="数组的深拷贝"></a>数组的深拷贝</h3></li></ul><p>深拷贝也就是拷贝出一个新的<strong>实例</strong>，新的实例和之前的实例互不影响。<br>实现深拷贝的方法有：</p><ol><li><p>利用JSON.stringify和JSON.parse</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1,2,3]</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'may'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'lee'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:18}];</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:20}];</span></code></pre><p>可以看出使用JSON.stringify和JSON.parse不管数组里面是基本类型还是引用类型，两个数组都互不影响。</p></li><li><p>使用jQuery的<a href="http://www.css88.com/jqapi-1.9/jQuery.extend/" target="_blank" rel="noopener">$.extend()方法</a></p></li></ol><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'may'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr2<span class="token operator">=</span>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>   arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'lee'</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:18}];</span>   arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['may',{age:18}];</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:20}];</span></code></pre><ul><li><h3 id="误区："><a href="#误区：" class="headerlink" title="误区："></a>误区：</h3>写到后面想起网上还有一篇文章也是有错误的，说使用ES6的扩展运算符…也可以实现深拷贝，但是其实扩展运算符…和slice()的作用是一样的，也是浅拷贝，也是数组里面有引用类型的话，一个数组中的引用类型改变，另一个数组中的引用类型也会跟着改变。<pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'may'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token punctuation">[</span> <span class="token operator">...</span>arr2 <span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['may',{age:18}];</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'lee'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['may',{age:18}]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['lee',{age:18}]</span> arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['lee',{age:20}]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['may',{age:20}]</span></code></pre></li><li><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3>所以最深的感悟就是遇到问题要先去看官方的文档解释，免得被误导，走更多的弯路。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本类型和引用类型</title>
      <link href="/2020/05/06/Javasrcipt-Type/"/>
      <url>/2020/05/06/Javasrcipt-Type/</url>
      
        <content type="html"><![CDATA[<h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><p>对于前端开发来说，内存空间并不是一个经常被提及的概念，所以很容易被大家忽视。在没有没有写这篇文章之前，我对于内存空间也是没有很多的理解。但是内存空间会在很多JS基础中涉及到，如果我们理解了它，可能很多问题也会迎刃而解。<br>那么内存空间究竟是什么呢？</p><p>在JS中每一个数据都需要一个内存空间。内存空间又分为下面两种：</p><ul><li><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3></li></ul><p>数据在栈内存中的存储方式，遵循<strong>后进先出</strong>的原则。栈内存包括了变量的<strong>标识符</strong>和变量的<strong>值</strong>，在栈内存中存储的数据的大小及生存周期是必须确定的</p><ul><li><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3>数据在堆内存中存储的<strong>顺序随意</strong>，堆内存用来存放所有引用类型的的数据，它的存储空间较大，在栈内存中存储的数据的大小无需固定。</li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>我们最开始接触指针应该是C语言，C语言中指针是指一个变量，其值是这个变量的地址，即内存位置的直接地址，如下图指针指的是变量的具体地址0x00之类的。<br><img src="https://github.com/zhangxinmei/summary/raw/master/img/6.jpg" alt="image"></p><h4 id="理解了上面的概念完之后，我们再回到我们的主题基本类型和引用类型："><a href="#理解了上面的概念完之后，我们再回到我们的主题基本类型和引用类型：" class="headerlink" title="理解了上面的概念完之后，我们再回到我们的主题基本类型和引用类型："></a>理解了上面的概念完之后，我们再回到我们的主题基本类型和引用类型：</h4><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>JavaScript 中的基本数据类型有：Undefined、Null、Boolean、Number、String，加上ES6新增的Symbol 总共6种。</p><p>在JS中的基本数据类型中，这些值都有固定的大小，往往都保存在栈内存中，由系统自动分配存储空间。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>如下图，变量a存储在栈内存中，他的标识符是a，变量的值是10,它的值是直接保存在栈内存中的，我们可以直接操作保存在栈内存中的值，所以这就是为什么基本类型是按值访问的了。</p><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/p5.png" alt="image"></p><h4 id="基本类型赋值问题"><a href="#基本类型赋值问题" class="headerlink" title="基本类型赋值问题:"></a>基本类型赋值问题:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//30</span></code></pre><p>上面的问题，我们经常会遇到的，可能在面试中也会被面试官问到，我们当然可以很轻松的知道最终a为20，b为30，但是这是为什么呢？可能这时候心里面就没有很清晰了吧！这也就和上面所说的基本类型和JS内存空间有关了，借用别人在总结这个问题的时候的一张图，可以很清晰的看出其中的原理：</p><p>因为在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值，因此a和b之间互相独立，没有影响，所以尽管b的值改变了，a的值也不会被改变。</p><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/p3.png" alt="image"></p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>JavaScript 中的引用类型：除过上面的 6 种基本数据类型外，剩下的就是引用类型了，即Object 类型，Object 类型又包括：Object、Array、Date 、RegExp 、Function 类型等。</p><p>JS的引用数据类型，它们值的大小是<strong>不固定</strong>的，所以无法像基本类型那样直接存储在栈内存中。因此引用类型的值是保存在堆内存中的对象，但是JavaScript不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个<strong>地址</strong>，也就是<strong>指针</strong>。<br>因此，引用类型的存储需要内存的栈内存和堆内存共同完成，栈内存用来保存变量标识符和指向堆内存中该对象的<strong>指针</strong>，也可以说是该对象在堆内存的地址。堆内存中保存对象的内容。而它们的内存地址（指针）和堆内存中的值是对应的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token punctuation">{</span> m<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p>如下图，数组a和对象b的变量标识符和指针保存在栈内存中，而它们的具体值保存在堆内存中。</p><p><img src="https://github.com/zhangxinmei/summary/raw/master/img/p7.png" alt="image"></p><h4 id="引用类型赋值问题"><a href="#引用类型赋值问题" class="headerlink" title="引用类型赋值问题:"></a>引用类型赋值问题:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">var</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>n<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//{a: 15, b: 20}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//{a: 15, b: 20}</span></code></pre><p>对于引用类型赋值问题，因为我们已经知道引用类型的存储是栈内存和堆内存共同完成的，一开始m保存了一个实例化的对象，这时将m赋值给n后，m和n都指向了这个实例化的对象，虽然他们的内存地址不一样，但是他们指向的对象是一样的，因此只要其中一个引用类型改变另一个引用类型也会跟着改变。<br><img src="https://github.com/zhangxinmei/summary/raw/master/img/p4.png" alt="image"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>基本类型的值是按值访问的，引用类型的值是按引用访问的。</p></li><li><p>基本类型是存储在栈内存中的，引用类型的存储是由栈内存和堆内存共同完成的</p></li><li><p>基本类型的赋值，两个变量是相互不影响的；引用类型的赋值，两个变量间是相互影响的。</p></li></ul><p>参考文献：</p><ul><li><a href="https://segmentfault.com/a/1190000002789651" target="_blank" rel="noopener">[ JS 进阶 ] 基本类型 引用类型 简单赋值 对象引用</a></li><li><a href="https://juejin.im/entry/589c29a9b123db16a3c18adf" target="_blank" rel="noopener">前端基础进阶：详细图解 JavaScript 内存空间</a></li><li><a href="https://www.zhihu.com/question/24466000" target="_blank" rel="noopener">C 语言指针怎么理解？</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
